// <auto-generated />
using System;
using APINegocio.Aplications.Data.ContextDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APINegocio.Migrations
{
    [DbContext(typeof(APINegociosDbContext))]
    [Migration("20240525015456_NegocioDbCuartaMG")]
    partial class NegocioDbCuartaMG
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APINegocio.Aplications.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.BranchOffices", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("BranchOfficesCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("BranchOfficesName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(550)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)");

                    b.Property<string>("FacebookAccount")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("InstagramAccount")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("IsCreadAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCreadBy")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsDeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeletedBy")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatud")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsUpdatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUpdatedBy")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<float>("Latitud")
                        .IsUnicode(false)
                        .HasColumnType("real");

                    b.Property<float>("Longitud")
                        .IsUnicode(false)
                        .HasColumnType("real");

                    b.Property<string>("OtherNumber")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasMaxLength(550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(550)");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)");

                    b.Property<string>("WhatsAppNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("BranchId");

                    b.ToTable("BranchOffices", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("CountryId")
                        .IsUnicode(true)
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IsDeletedAt")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsStatus")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IsUpdateAt")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUpdated")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.HasKey("CityId");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Countries", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("IsDateCreadCountry")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IsDeletedAt")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRecurring")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatud")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUpdated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ProveedorId")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int>("StorId")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<DateTime>("WhenDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.HasKey("CountryId");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Customers", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("CreatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsDeleted")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsDeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsModified")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatu")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsUpdatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrdersOrderId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.HasKey("CustomerId");

                    b.HasIndex("OrdersOrderId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.DetalleTicker", b =>
                {
                    b.Property<int>("DetalleId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetalleId"));

                    b.Property<int>("CustomerId")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<decimal>("Descounts")
                        .IsUnicode(false)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsDeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsModified")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsModifiedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Itbis")
                        .IsUnicode(false)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdated")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int?>("ProductosProductId")
                        .HasColumnType("int");

                    b.Property<int>("TickerId")
                        .HasColumnType("int");

                    b.Property<int?>("TickersTickerId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalDescout")
                        .IsUnicode(false)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalItbis")
                        .IsUnicode(false)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPagar")
                        .IsUnicode(false)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DetalleId");

                    b.HasIndex("ProductosProductId");

                    b.HasIndex("TickersTickerId");

                    b.ToTable("DetalleTickers", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"));

                    b.Property<string>("CodigoInventory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateCread")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<string>("DescrictionInventory")
                        .IsRequired()
                        .HasMaxLength(550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(550)");

                    b.Property<string>("InventoryName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("IsDateCread")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsDeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsShipped")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsUpdatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberInventory")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int>("ProveedorId")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int?>("ProveedoresProveedorId")
                        .HasColumnType("int");

                    b.Property<int?>("ProveedosProductId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceInventory")
                        .IsRequired()
                        .HasMaxLength(550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(550)");

                    b.Property<int>("ShoppingId")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int?>("StoresId")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.HasIndex("ProveedoresProveedorId");

                    b.HasIndex("ProveedosProductId");

                    b.HasIndex("ShoppingId");

                    b.HasIndex("StoresId");

                    b.ToTable("Inventory", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOrder")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAsset")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("IsCread")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsCreadOrderDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsDeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsModified")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsModifiedOrderDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("OrderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int?>("ShoppingId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("ShoppingId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Payments", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<string>("Aplicado")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Creditado")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("Fecha")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IsCreadtPayment")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCreadtRefund")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IsDeletedAt")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRefund")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatud")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdated")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsUpdatedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Monto")
                        .IsUnicode(false)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("Reservado")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Toquen")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Productos", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<DateTime>("CreatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(550)");

                    b.Property<bool>("IsApproved")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("IsAsset")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IsDateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsDeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsModified")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .IsUnicode(false)
                        .HasColumnType("Decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Referencia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Productos", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Proveedores", b =>
                {
                    b.Property<int>("ProveedorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProveedorId"));

                    b.Property<DateTime>("CreadProveedor")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAsset")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsDateModified")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsDeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsModified")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<string>("ProveedorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProveedorDescription")
                        .IsRequired()
                        .HasMaxLength(550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(550)");

                    b.Property<string>("ProveedorDirection")
                        .IsRequired()
                        .HasMaxLength(550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(550)");

                    b.Property<string>("ProveedorName")
                        .IsRequired()
                        .HasMaxLength(550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(550)");

                    b.Property<string>("ProveedorReference")
                        .IsRequired()
                        .HasMaxLength(550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(550)");

                    b.HasKey("ProveedorId");

                    b.ToTable("Proveedores", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Senders", b =>
                {
                    b.Property<int>("SenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SenderId"));

                    b.Property<bool>("IsAsset")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsCreadSender")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsDeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsModifiedPostalCode")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("IsModifiedSender")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsModifiedSenderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrdersOrderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SenderDirection")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasMaxLength(180)
                        .IsUnicode(false)
                        .HasColumnType("varchar(180)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SenderPhone")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("SenderPostalCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("SenderId");

                    b.HasIndex("OrdersOrderId");

                    b.ToTable("Senders", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Shopping", b =>
                {
                    b.Property<int>("ShoppingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingId"));

                    b.Property<bool>("IsAsset")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsDeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IsModifedShopping")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsModified")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsShoppingDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberShopping")
                        .IsUnicode(false)
                        .HasColumnType("INT");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("ShoppingCount")
                        .IsUnicode(false)
                        .HasColumnType("INT");

                    b.Property<string>("ShoppingDescription")
                        .IsRequired()
                        .HasMaxLength(550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(550)");

                    b.Property<string>("ShoppingName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("ShoppingStatus")
                        .IsUnicode(false)
                        .HasColumnType("INT");

                    b.Property<string>("ShoppingTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("ShoppingId");

                    b.ToTable("Shopping", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Stores", b =>
                {
                    b.Property<int>("StoresId")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoresId"));

                    b.Property<string>("AceptPyments")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(550)");

                    b.Property<string>("FacebookAccount")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("InstagramAccount")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("IsCreadDateStore")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsDeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IsModified")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsStatud")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<string>("Latitud")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Longitud")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("OtherNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("StoresCount")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("StoresDescription")
                        .IsRequired()
                        .HasMaxLength(550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(550)");

                    b.Property<string>("StoresName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("StoresTotal")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("WhatsAppNumber")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("StoresId");

                    b.ToTable("Stores", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Tickers", b =>
                {
                    b.Property<int>("TickerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TickerId"));

                    b.Property<string>("CashierName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CodeTicker")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int?>("CustomersCustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateImprect")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(550)
                        .IsUnicode(false)
                        .HasColumnType("varchar(550)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsDeleted")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsDeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsImprection")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("IsModified")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsModifiedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<int>("NIF")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("Pago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProductosProductId")
                        .HasColumnType("int");

                    b.Property<int>("RNC")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("TickerTitulo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<decimal>("TotalAmountItbis")
                        .IsUnicode(false)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmountPay")
                        .IsUnicode(false)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalProduct")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<int>("TransactionNumber")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.HasKey("TickerId");

                    b.HasIndex("CustomersCustomerId");

                    b.HasIndex("ProductosProductId");

                    b.ToTable("Tickers", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsAsset")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsDeletedAt")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDate")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModifiedDateUtc")
                        .IsUnicode(false)
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Customers", b =>
                {
                    b.HasOne("APINegocio.Aplications.Entities.Orders", null)
                        .WithMany("Customers")
                        .HasForeignKey("OrdersOrderId");
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.DetalleTicker", b =>
                {
                    b.HasOne("APINegocio.Aplications.Entities.Productos", "Productos")
                        .WithMany()
                        .HasForeignKey("ProductosProductId");

                    b.HasOne("APINegocio.Aplications.Entities.Tickers", "Tickers")
                        .WithMany("DetalleTickers")
                        .HasForeignKey("TickersTickerId");

                    b.Navigation("Productos");

                    b.Navigation("Tickers");
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Inventory", b =>
                {
                    b.HasOne("APINegocio.Aplications.Entities.Proveedores", "Proveedores")
                        .WithMany()
                        .HasForeignKey("ProveedoresProveedorId");

                    b.HasOne("APINegocio.Aplications.Entities.Productos", "Proveedos")
                        .WithMany()
                        .HasForeignKey("ProveedosProductId");

                    b.HasOne("APINegocio.Aplications.Entities.Shopping", "Shopping")
                        .WithMany()
                        .HasForeignKey("ShoppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APINegocio.Aplications.Entities.Stores", "Stores")
                        .WithMany()
                        .HasForeignKey("StoresId");

                    b.Navigation("Proveedores");

                    b.Navigation("Proveedos");

                    b.Navigation("Shopping");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Orders", b =>
                {
                    b.HasOne("APINegocio.Aplications.Entities.Shopping", null)
                        .WithMany("Orders")
                        .HasForeignKey("ShoppingId");
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Senders", b =>
                {
                    b.HasOne("APINegocio.Aplications.Entities.Orders", null)
                        .WithMany("Senders")
                        .HasForeignKey("OrdersOrderId");
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Tickers", b =>
                {
                    b.HasOne("APINegocio.Aplications.Entities.Customers", "Customers")
                        .WithMany()
                        .HasForeignKey("CustomersCustomerId");

                    b.HasOne("APINegocio.Aplications.Entities.Productos", "Productos")
                        .WithMany()
                        .HasForeignKey("ProductosProductId");

                    b.Navigation("Customers");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("APINegocio.Aplications.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("APINegocio.Aplications.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APINegocio.Aplications.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("APINegocio.Aplications.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Orders", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Senders");
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Shopping", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("APINegocio.Aplications.Entities.Tickers", b =>
                {
                    b.Navigation("DetalleTickers");
                });
#pragma warning restore 612, 618
        }
    }
}
